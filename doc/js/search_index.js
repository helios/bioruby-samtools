var search_data = {"index":{"searchIndex":["bio","db","alignment","pileup","sam","library","tools","bam1coret","bam1t","bamheadert","bampileup1t","samfilet","samfiletx","samexception","sam","tag","vcf","libc","average_coverage()","bam_sort()","chromosome_coverage()","close()","deprecated_pileup()","each_reference()","fetch()","fetch_reference()","fetch_with_function()","filename()","finalize()","finalize()","genotype_list()","index_stats()","int_or_raw()","iupac_to_base()","load_index()","load_reference()","merge()","mpileup()","mpileup_plus()","new()","new()","new()","new()","new()","non_ref_count()","non_refs()","open()","parse_line()","qname()","query_string()","ref_count()","sam=()","set()","set()","text()","text=()","to_s()","to_s()","to_vcf()","license"],"longSearchIndex":["bio","bio::db","bio::db::alignment","bio::db::pileup","bio::db::sam","bio::db::sam::library","bio::db::sam::tools","bio::db::sam::tools::bam1coret","bio::db::sam::tools::bam1t","bio::db::sam::tools::bamheadert","bio::db::sam::tools::bampileup1t","bio::db::sam::tools::samfilet","bio::db::sam::tools::samfiletx","bio::db::samexception","bio::db::sam","bio::db::tag","bio::db::vcf","libc","bio::db::sam#average_coverage()","bio::db::sam::tools::bam_sort()","bio::db::sam#chromosome_coverage()","bio::db::sam#close()","bio::db::sam#deprecated_pileup()","bio::db::sam#each_reference()","bio::db::sam#fetch()","bio::db::sam#fetch_reference()","bio::db::sam#fetch_with_function()","bio::db::sam::library::filename()","bio::db::alignment::finalize()","bio::db::sam::finalize()","bio::db::pileup#genotype_list()","bio::db::sam#index_stats()","bio::db::vcf#int_or_raw()","bio::db::pileup::iupac_to_base()","bio::db::sam#load_index()","bio::db::sam#load_reference()","bio::db::sam::merge()","bio::db::sam#mpileup()","bio::db::sam#mpileup_plus()","bio::db::alignment::new()","bio::db::pileup::new()","bio::db::samexception::new()","bio::db::sam::new()","bio::db::vcf::new()","bio::db::pileup#non_ref_count()","bio::db::pileup#non_refs()","bio::db::sam#open()","bio::db::vcf#parse_line()","bio::db::sam::tools::bam1t#qname()","bio::db::sam#query_string()","bio::db::pileup#ref_count()","bio::db::alignment#sam=()","bio::db::alignment#set()","bio::db::tag#set()","bio::db::sam::tools::bamheadert#text()","bio::db::sam::tools::bamheadert#text=()","bio::db::pileup#to_s()","bio::db::sam#to_s()","bio::db::pileup#to_vcf()",""],"info":[["Bio","","Bio.html","","<p>Bio::DB::Pileup \n<p>A class representing information in SAMTools pileup format\n<p>Author &mdash; Dan MacLean (dan.maclean@tsl …\n"],["Bio::DB","","Bio/DB.html","",""],["Bio::DB::Alignment","","Bio/DB/Alignment.html","",""],["Bio::DB::Pileup","","Bio/DB/Pileup.html","",""],["Bio::DB::SAM","","Bio/DB/SAM.html","",""],["Bio::DB::SAM::Library","","Bio/DB/SAM/Library.html","",""],["Bio::DB::SAM::Tools","","Bio/DB/SAM/Tools.html","",""],["Bio::DB::SAM::Tools::Bam1CoreT","","Bio/DB/SAM/Tools/Bam1CoreT.html","",""],["Bio::DB::SAM::Tools::Bam1T","","Bio/DB/SAM/Tools/Bam1T.html","",""],["Bio::DB::SAM::Tools::BamHeaderT","","Bio/DB/SAM/Tools/BamHeaderT.html","","<p>typedef struct {\n\n<pre>int32_t n_targets;\nchar **target_name;\nuint32_t *target_len;\nvoid *dict, *hash, *rg2lib; ...</pre>\n"],["Bio::DB::SAM::Tools::BamPileup1T","","Bio/DB/SAM/Tools/BamPileup1T.html","",""],["Bio::DB::SAM::Tools::SamfileT","","Bio/DB/SAM/Tools/SamfileT.html","","<p>typedef struct {\n\n<pre>int type;\nunion {\n        tamFile tamr;\n        bamFile bam;\n        FILE *tamw;\n} x; ...</pre>\n"],["Bio::DB::SAM::Tools::SamfileTX","","Bio/DB/SAM/Tools/SamfileTX.html","",""],["Bio::DB::SAMException","","Bio/DB/SAMException.html","",""],["Bio::DB::Sam","","Bio/DB/Sam.html","",""],["Bio::DB::Tag","","Bio/DB/Tag.html","",""],["Bio::DB::Vcf","","Bio/DB/Vcf.html","",""],["LibC","","LibC.html","","<p>require ‘bio/db/pileup’ require ‘bio/db/vcf’\n"],["average_coverage","Bio::DB::Sam","Bio/DB/Sam.html#method-i-average_coverage","(chromosome, qstart, len)","<p>Returns the average coverage of a region in a bam file.\n"],["bam_sort","Bio::DB::SAM::Tools","Bio/DB/SAM/Tools.html#method-c-bam_sort","(bam_filename, bam_output_prefix)",""],["chromosome_coverage","Bio::DB::Sam","Bio/DB/Sam.html#method-i-chromosome_coverage","(chromosome, qstart, len)","<p>Returns an array with the coverage at each possition in the queried region\nThis is a simple average coverage …\n"],["close","Bio::DB::Sam","Bio/DB/Sam.html#method-i-close","()","<p>Closes the sam file and destroys the C pointers using the functions\nprovided by libbam\n"],["deprecated_pileup","Bio::DB::Sam","Bio/DB/Sam.html#method-i-deprecated_pileup","( cmd )","<p>utility method that does not use the samtools API, it calls samtools\ndirectly as if on the command line …\n"],["each_reference","Bio::DB::Sam","Bio/DB/Sam.html#method-i-each_reference","()","<p>yields each reference name and its length\n"],["fetch","Bio::DB::Sam","Bio/DB/Sam.html#method-i-fetch","(chromosome, qstart, qend)","<p>Returns an array of Alignments on a given region.\n"],["fetch_reference","Bio::DB::Sam","Bio/DB/Sam.html#method-i-fetch_reference","(chromosome, qstart,qend)","<p>Returns the sequence for a given region.\n"],["fetch_with_function","Bio::DB::Sam","Bio/DB/Sam.html#method-i-fetch_with_function","(chromosome, qstart, qend, function)","<p>Executes a function on each Alignment inside the queried region of the\nchromosome. The chromosome can …\n"],["filename","Bio::DB::SAM::Library","Bio/DB/SAM/Library.html#method-c-filename","()","<p>Return the path with the file name of the library for the specific\noperating system\n"],["finalize","Bio::DB::Alignment","Bio/DB/Alignment.html#method-c-finalize","(object_id)",""],["finalize","Bio::DB::Sam","Bio/DB/Sam.html#method-c-finalize","(id)","<p>Destructor method that closes the file before letting the object be garbage\ncollected.\n"],["genotype_list","Bio::DB::Pileup","Bio/DB/Pileup.html#method-i-genotype_list","()",""],["index_stats","Bio::DB::Sam","Bio/DB/Sam.html#method-i-index_stats","()",""],["int_or_raw","Bio::DB::Vcf","Bio/DB/Vcf.html#method-i-int_or_raw","(x)",""],["iupac_to_base","Bio::DB::Pileup","Bio/DB/Pileup.html#method-c-iupac_to_base","(alt_base)","<p>returns\n"],["load_index","Bio::DB::Sam","Bio/DB/Sam.html#method-i-load_index","()","<p>Loads the bam index to be used for fetching. If the index doesn’t exists\nthe index is built provided …\n"],["load_reference","Bio::DB::Sam","Bio/DB/Sam.html#method-i-load_reference","()","<p>Loads the reference file to be able to query regions of it. This requires\nthe fai index to exist in the …\n"],["merge","Bio::DB::Sam","Bio/DB/Sam.html#method-c-merge","(files, merged_file, headers, add_RG, by_qname)","<p>Merges n BAM files. This doesn’t require to create a SAM object\n<p>files &mdash; An array with the paths to the files. …\n"],["mpileup","Bio::DB::Sam","Bio/DB/Sam.html#method-i-mpileup","( opts={})","<p>calls the mpileup function, opts is a hash of options identical to the\ncommand line options for mpileup. …\n"],["mpileup_plus","Bio::DB::Sam","Bio/DB/Sam.html#method-i-mpileup_plus","( opts )","<p>experimental method that spawns a samtools mpileup | bcftools view process\nand supports returning of …\n"],["new","Bio::DB::Alignment","Bio/DB/Alignment.html#method-c-new","()",""],["new","Bio::DB::Pileup","Bio/DB/Pileup.html#method-c-new","(pile_up_line)","<p>creates the Pileup object\n\n<pre>pile_up_line = &quot;seq2\\t151\\tG\\tG\\t36\\t0\\t99\\t12\\t...........A\\t:9&lt;;;7=&lt;&lt;&lt;&lt;&lt;&quot; ...</pre>\n"],["new","Bio::DB::SAMException","Bio/DB/SAMException.html#method-c-new","()","<p>we can add further variables to give information of the excpetion\n"],["new","Bio::DB::Sam","Bio/DB/Sam.html#method-c-new","(optsa={})","<p>To make a new sam object. Initialize expects a hash optsa with the\nfollowing elemets:\n<p>fasta &mdash; The fasta …\n"],["new","Bio::DB::Vcf","Bio/DB/Vcf.html#method-c-new","(line=nil, sample_names=nil)","<p>create the vcf object, use the ordered list of sample names to label\nsamples if provided [‘A’, ‘B’, ‘C’], …\n"],["non_ref_count","Bio::DB::Pileup","Bio/DB/Pileup.html#method-i-non_ref_count","()","<p>returns the total non-reference bases in the reads at this position\n"],["non_refs","Bio::DB::Pileup","Bio/DB/Pileup.html#method-i-non_refs","()","<p>Calculate the total count of each non-reference nucleotide and return a\nhash of all 4 nt counts, returns …\n"],["open","Bio::DB::Sam","Bio/DB/Sam.html#method-i-open","()","<p>Function that actually opens the sam file Throws a SAMException if the file\ncan’t be open.\n"],["parse_line","Bio::DB::Vcf","Bio/DB/Vcf.html#method-i-parse_line","(line, sample_names=nil)","<p>gets the info in the Vcf lines and parses it, setting the attributes\n"],["qname","Bio::DB::SAM::Tools::Bam1T","Bio/DB/SAM/Tools/Bam1T.html#method-i-qname","()",""],["query_string","Bio::DB::Sam","Bio/DB/Sam.html#method-i-query_string","(chromosome, qstart,qend)","<p>Generates a query sting to be used by the region parser in samtools.  In\nprinciple, you shouldn’t need …\n"],["ref_count","Bio::DB::Pileup","Bio/DB/Pileup.html#method-i-ref_count","()","<p>returns the count of reference-bases in the reads at this position\n"],["sam=","Bio::DB::Alignment","Bio/DB/Alignment.html#method-i-sam-3D","(sam)",""],["set","Bio::DB::Alignment","Bio/DB/Alignment.html#method-i-set","(bam_alignment, header)",""],["set","Bio::DB::Tag","Bio/DB/Tag.html#method-i-set","(str)",""],["text","Bio::DB::SAM::Tools::BamHeaderT","Bio/DB/SAM/Tools/BamHeaderT.html#method-i-text","()",""],["text=","Bio::DB::SAM::Tools::BamHeaderT","Bio/DB/SAM/Tools/BamHeaderT.html#method-i-text-3D","(str)",""],["to_s","Bio::DB::Pileup","Bio/DB/Pileup.html#method-i-to_s","()","<p>returns pileup format line as\n"],["to_s","Bio::DB::Sam","Bio/DB/Sam.html#method-i-to_s","()","<p>Prints a description of the sam file in a text format containg if it is\nbinary or text, the path and …\n"],["to_vcf","Bio::DB::Pileup","Bio/DB/Pileup.html#method-i-to_vcf","()","<p>returns basic VCF string as per samtools/misc sam2vcf.pl except that it\nscrimps on the ref for indels, …\n"],["LICENSE","","LICENSE_txt.html","","<p>Copyright © 2011 Raoul J.P. Bonnal\n<p>Permission is hereby granted, free of charge, to any person obtaining …\n"]]}}